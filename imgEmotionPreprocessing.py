# -*- coding: utf-8 -*-
"""ImgEmotionPreprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sE31_eYQ-5nM2VNu504Mv6DWvSeR9WNG
"""

!pip install tensorflow opencv-python

from google.colab import drive
drive.mount('/content/drive')

import cv2
import numpy as np
import os
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt

# Define preprocessing function
def preprocess_image(image_path, target_size=(48, 48)):
    # Load image in grayscale
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    # Check if image is loaded successfully
    if image is None:
        print(f"Error loading image: {image_path}")
        return None
    else:
        print(f"Loaded image: {image_path}")  # Log loaded image path

    # Display original image
    plt.imshow(image, cmap='gray')
    plt.title("Original Image")
    plt.show()

    # Resize image
    image = cv2.resize(image, target_size)

    # Display resized image
    plt.imshow(image, cmap='gray')
    plt.title("Resized Image")
    plt.show()

    # Histogram equalization
    image = cv2.equalizeHist(image)

    # Display histogram equalized image
    plt.imshow(image, cmap='gray')
    plt.title("Histogram Equalized Image")
    plt.show()

    # Normalize the image data
    image = image.astype("float32") / 255.0

    # Display normalized image
    plt.imshow(image, cmap='gray')
    plt.title("Normalized Image")
    plt.show()

    return image

# Define function to process directory for a specific class
def process_class(input_dir, output_dir, class_name):
    class_input_dir = os.path.join(input_dir, class_name)
    class_output_dir = os.path.join(output_dir, class_name)
    os.makedirs(class_output_dir, exist_ok=True)

    for file in os.listdir(class_input_dir):
        file_path = os.path.join(class_input_dir, file)
        if file.lower().endswith(('.png', '.jpg', '.jpeg')):
            processed_image = preprocess_image(file_path)

            if processed_image is not None:
                # Save processed image
                output_path = os.path.join(class_output_dir, file)
                processed_image_uint8 = (processed_image * 255).astype(np.uint8)  # Convert to uint8
                cv2.imwrite(output_path, processed_image_uint8)  # Save the image

# Set input and output directories
input_dir = '/content/drive/MyDrive/Emotion_data'
output_dir = '/content/drive/MyDrive/FullProcessedImages'

# Classes to process
classes = ['neutral', 'happy', 'sad']

# Process each class within train directory
for class_name in classes:
    process_class(os.path.join(input_dir, 'train'), os.path.join(output_dir, 'train'), class_name)

# Process each class within test directory
for class_name in classes:
    process_class(os.path.join(input_dir, 'test'), os.path.join(output_dir, 'test'), class_name)

import cv2
import numpy as np
import os
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt

# Define preprocessing function
def preprocess_image(image_path, target_size=(48, 48)):
    # Load image in grayscale
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    # Check if image is loaded successfully
    if image is None:
        print(f"Error loading image: {image_path}")
        return None
    else:
        print(f"Loaded image: {image_path}")  # Log loaded image path

    # Display original image
    plt.imshow(image, cmap='gray')
    plt.title("Original Image")
    plt.show()

    # Resize image
    image = cv2.resize(image, target_size)

    # Display resized image
    plt.imshow(image, cmap='gray')
    plt.title("Resized Image")
    plt.show()

    # Histogram equalization
    image = cv2.equalizeHist(image)

    # Display histogram equalized image
    plt.imshow(image, cmap='gray')
    plt.title("Histogram Equalized Image")
    plt.show()

    # Normalize the image data
    image = image.astype("float32") / 255.0

    # Display normalized image
    plt.imshow(image, cmap='gray')
    plt.title("Normalized Image")
    plt.show()

    return image

# Define function to process directory for a specific class
def process_class(input_dir, output_dir, class_name):
    class_input_dir = os.path.join(input_dir, class_name)
    class_output_dir = os.path.join(output_dir, class_name)
    os.makedirs(class_output_dir, exist_ok=True)

    for file in os.listdir(class_input_dir):
        file_path = os.path.join(class_input_dir, file)
        if file.lower().endswith(('.png', '.jpg', '.jpeg')):
            processed_image = preprocess_image(file_path)

            if processed_image is not None:
                # Save processed image
                output_path = os.path.join(class_output_dir, file)
                processed_image_uint8 = (processed_image * 255).astype(np.uint8)  # Convert to uint8
                cv2.imwrite(output_path, processed_image_uint8)  # Save the image

# Set input and output directories
input_dir = '/content/drive/MyDrive/Emotion_data'
output_dir = '/content/drive/MyDrive/FullProcessedImages'

# Classes to process
classes = ['angry', 'fear', 'surprise']

# Process each class within train directory
for class_name in classes:
    process_class(os.path.join(input_dir, 'train'), os.path.join(output_dir, 'train'), class_name)

# Process each class within test directory
for class_name in classes:
    process_class(os.path.join(input_dir, 'test'), os.path.join(output_dir, 'test'), class_name)